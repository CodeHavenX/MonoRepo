/**
 * Configure a Kotlin-wasm target with compose support.
 */

apply plugin: "org.jetbrains.kotlin.multiplatform"
apply plugin: "org.jetbrains.compose"
apply plugin: "org.jetbrains.kotlin.plugin.compose"

apply from: "$rootDir/gradle/kotlin-mpp-target-wasm.gradle"

compose.experimental {
    web.application {}
}

if (!hasProperty('wasmModuleName') || !wasmModuleName || wasmModuleName.toString().trim().isEmpty()) {
    throw new GradleException(
            "wasmModuleName must be set and not empty in your build script.\n" +
            "Ensure that you have this line BEFORE you apply any wasm-compose plugins:\n" +
            "\tval wasmModuleName by extra(\"YOUR_MODULE_NAME\")\n"
    )
}

// To list the produced artifacts into the release page, add the path to your file
// in the github actions workflow file at .github/workflows/buildRelease-main.yml
task zipWasmProductionExecutable(type: Zip) {
    group = "distribution"
    description = "Zips the WASM production executable output."
    from("build/dist/wasmJs/productionExecutable")
    archiveFileName = wasmModuleName + ".zip"
    destinationDirectory = file("build/dist/wasmJs/")

    dependsOn 'wasmJsBrowserDistribution'
}

releaseWasm.dependsOn(zipWasmProductionExecutable)