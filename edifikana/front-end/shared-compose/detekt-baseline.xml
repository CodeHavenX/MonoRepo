<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>UndocumentedPublicClass:AddEmployeeEvent.kt$AddEmployeeEvent</ID>
    <ID>UndocumentedPublicClass:AddEmployeeEvent.kt$AddEmployeeEvent$Noop : AddEmployeeEvent</ID>
    <ID>UndocumentedPublicClass:AddEmployeeEvent.kt$AddEmployeeEvent$TriggerMainActivityEvent : AddEmployeeEvent</ID>
    <ID>UndocumentedPublicClass:AddEmployeeUIState.kt$AddEmployeeUIState</ID>
    <ID>UndocumentedPublicClass:AddEmployeeViewModel.kt$AddEmployeeViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:AddRecordEvent.kt$AddRecordEvent</ID>
    <ID>UndocumentedPublicClass:AddRecordEvent.kt$AddRecordEvent$Noop : AddRecordEvent</ID>
    <ID>UndocumentedPublicClass:AddRecordEvent.kt$AddRecordEvent$TriggerMainActivityEvent : AddRecordEvent</ID>
    <ID>UndocumentedPublicClass:AddRecordUIModel.kt$AddRecordUIModel</ID>
    <ID>UndocumentedPublicClass:AddRecordUIState.kt$AddRecordUIState</ID>
    <ID>UndocumentedPublicClass:AddRecordViewModel.kt$AddRecordViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:AppDatabase.kt$AppDatabase : RoomDatabase</ID>
    <ID>UndocumentedPublicClass:AttachmentManager.kt$AttachmentManager</ID>
    <ID>UndocumentedPublicClass:AuthManager.kt$AuthManager</ID>
    <ID>UndocumentedPublicClass:AuthService.kt$AuthService</ID>
    <ID>UndocumentedPublicClass:Converters.kt$Converters</ID>
    <ID>UndocumentedPublicClass:CorutilesUtils.kt$IODependencies</ID>
    <ID>UndocumentedPublicClass:DownloadStrategy.kt$DownloadStrategy</ID>
    <ID>UndocumentedPublicClass:EdifikanaBaseViewModel.kt$EdifikanaBaseViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:EdifikanaMainScreenEventHandler.kt$EdifikanaMainScreenEventHandler</ID>
    <ID>UndocumentedPublicClass:EmployeeListEvent.kt$EmployeeListEvent</ID>
    <ID>UndocumentedPublicClass:EmployeeListEvent.kt$EmployeeListEvent$Noop : EmployeeListEvent</ID>
    <ID>UndocumentedPublicClass:EmployeeListEvent.kt$EmployeeListEvent$TriggerMainActivityEvent : EmployeeListEvent</ID>
    <ID>UndocumentedPublicClass:EmployeeListUIModel.kt$EmployeeUIModel</ID>
    <ID>UndocumentedPublicClass:EmployeeListUIState.kt$EmployeeListUIState</ID>
    <ID>UndocumentedPublicClass:EmployeeListViewModel.kt$EmployeeListViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:EmployeeManager.kt$EmployeeManager</ID>
    <ID>UndocumentedPublicClass:EmployeeModel.kt$EmployeeModel</ID>
    <ID>UndocumentedPublicClass:EmployeeService.kt$EmployeeService</ID>
    <ID>UndocumentedPublicClass:EntryEvent.kt$EntryEvent</ID>
    <ID>UndocumentedPublicClass:EntryEvent.kt$EntryEvent$Noop : EntryEvent</ID>
    <ID>UndocumentedPublicClass:EntryEvent.kt$EntryEvent$TriggerMainActivityEvent : EntryEvent</ID>
    <ID>UndocumentedPublicClass:EntryUIModel.kt$EntryFieldUIModel</ID>
    <ID>UndocumentedPublicClass:EntryUIModel.kt$EntryUIModel</ID>
    <ID>UndocumentedPublicClass:EntryUIState.kt$EntryUIState</ID>
    <ID>UndocumentedPublicClass:EntryViewModel.kt$EntryViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:EventLogEvent.kt$EventLogEvent</ID>
    <ID>UndocumentedPublicClass:EventLogEvent.kt$EventLogEvent$Noop : EventLogEvent</ID>
    <ID>UndocumentedPublicClass:EventLogEvent.kt$EventLogEvent$TriggerMainActivityEvent : EventLogEvent</ID>
    <ID>UndocumentedPublicClass:EventLogManager.kt$EventLogManager</ID>
    <ID>UndocumentedPublicClass:EventLogRecordDao.kt$EventLogRecordDao</ID>
    <ID>UndocumentedPublicClass:EventLogRecordModel.kt$AttachmentHolder</ID>
    <ID>UndocumentedPublicClass:EventLogRecordModel.kt$EventLogRecordModel</ID>
    <ID>UndocumentedPublicClass:EventLogService.kt$EventLogService</ID>
    <ID>UndocumentedPublicClass:EventLogUIModel.kt$EventLogRecordUIModel</ID>
    <ID>UndocumentedPublicClass:EventLogUIState.kt$EventLogUIState</ID>
    <ID>UndocumentedPublicClass:EventLogViewModel.kt$EventLogViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:Features.kt$Features</ID>
    <ID>UndocumentedPublicClass:FileAttachmentDao.kt$FileAttachmentDao</ID>
    <ID>UndocumentedPublicClass:FormListEvent.kt$FormListEvent</ID>
    <ID>UndocumentedPublicClass:FormListEvent.kt$FormListEvent$Noop : FormListEvent</ID>
    <ID>UndocumentedPublicClass:FormListEvent.kt$FormListEvent$TriggerMainActivityEvent : FormListEvent</ID>
    <ID>UndocumentedPublicClass:FormListUIModel.kt$FormUIModel</ID>
    <ID>UndocumentedPublicClass:FormListUIState.kt$FormListUIState</ID>
    <ID>UndocumentedPublicClass:FormListViewModel.kt$FormListViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:FormModel.kt$FieldModel</ID>
    <ID>UndocumentedPublicClass:FormModel.kt$FormModel</ID>
    <ID>UndocumentedPublicClass:FormRecordModel.kt$FormRecordFieldModel</ID>
    <ID>UndocumentedPublicClass:FormRecordModel.kt$FormRecordModel</ID>
    <ID>UndocumentedPublicClass:FormsManager.kt$FormsManager</ID>
    <ID>UndocumentedPublicClass:FormsService.kt$FormsService</ID>
    <ID>UndocumentedPublicClass:MainActivityDelegatedEvent.kt$MainActivityDelegatedEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityDelegatedEvent.kt$MainActivityDelegatedEvent$HandleReceivedImage : MainActivityDelegatedEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityDelegatedEvent.kt$MainActivityDelegatedEvent$HandleReceivedImages : MainActivityDelegatedEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityDelegatedEvent.kt$MainActivityDelegatedEvent$Noop : MainActivityDelegatedEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$Navigate : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$NavigateBack : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$NavigateToRootPage : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$Noop : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$OpenCamera : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$OpenImageExternally : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$OpenPhotoPicker : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$ShareContent : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityEvent.kt$MainActivityEvent$ShowSnackbar : MainActivityEvent</ID>
    <ID>UndocumentedPublicClass:MainActivityUiModel.kt$BottomBarDestinationUiModel</ID>
    <ID>UndocumentedPublicClass:MainActivityViewModel.kt$MainActivityViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:PropertyConfigManager.kt$PropertyConfigManager</ID>
    <ID>UndocumentedPublicClass:PropertyConfigModel.kt$PropertyConfigModel</ID>
    <ID>UndocumentedPublicClass:PropertyConfigService.kt$PropertyConfigService</ID>
    <ID>UndocumentedPublicClass:RecordReadEvent.kt$RecordReadEvent</ID>
    <ID>UndocumentedPublicClass:RecordReadEvent.kt$RecordReadEvent$Noop : RecordReadEvent</ID>
    <ID>UndocumentedPublicClass:RecordReadEvent.kt$RecordReadEvent$TriggerMainActivityEvent : RecordReadEvent</ID>
    <ID>UndocumentedPublicClass:RecordReadUIModel.kt$RecordFieldUIModel</ID>
    <ID>UndocumentedPublicClass:RecordReadUIModel.kt$RecordReadUIModel</ID>
    <ID>UndocumentedPublicClass:RecordReadUIState.kt$RecordReadUIState</ID>
    <ID>UndocumentedPublicClass:RecordReadViewModel.kt$RecordReadViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:RecordsEvent.kt$RecordsEvent</ID>
    <ID>UndocumentedPublicClass:RecordsEvent.kt$RecordsEvent$Noop : RecordsEvent</ID>
    <ID>UndocumentedPublicClass:RecordsEvent.kt$RecordsEvent$TriggerMainActivityEvent : RecordsEvent</ID>
    <ID>UndocumentedPublicClass:RecordsUIModel.kt$RecordsUIModel</ID>
    <ID>UndocumentedPublicClass:RecordsUIState.kt$RecordsUIState</ID>
    <ID>UndocumentedPublicClass:RecordsViewModel.kt$RecordsViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:RemoteConfig.kt$FeatureConfig</ID>
    <ID>UndocumentedPublicClass:RemoteConfigService.kt$RemoteConfigService</ID>
    <ID>UndocumentedPublicClass:Route.kt$Route</ID>
    <ID>UndocumentedPublicClass:RouteSafePath.kt$RouteSafePath</ID>
    <ID>UndocumentedPublicClass:SignInResult.kt$SignInResult</ID>
    <ID>UndocumentedPublicClass:SignInV2Event.kt$SignInV2Event</ID>
    <ID>UndocumentedPublicClass:SignInV2Event.kt$SignInV2Event$LaunchSignIn : SignInV2Event</ID>
    <ID>UndocumentedPublicClass:SignInV2Event.kt$SignInV2Event$Noop : SignInV2Event</ID>
    <ID>UndocumentedPublicClass:SignInV2Event.kt$SignInV2Event$TriggerMainActivityEvent : SignInV2Event</ID>
    <ID>UndocumentedPublicClass:SignInV2UIModel.kt$SignInV2UIModel</ID>
    <ID>UndocumentedPublicClass:SignInV2UIModel.kt$SignInV2UIModel$SignInFormUIModel</ID>
    <ID>UndocumentedPublicClass:SignInV2UIState.kt$SignInV2UIState</ID>
    <ID>UndocumentedPublicClass:SignInV2ViewModel.kt$SignInV2ViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:StorageRef.kt$StorageRef</ID>
    <ID>UndocumentedPublicClass:StorageService.kt$StorageService</ID>
    <ID>UndocumentedPublicClass:SupaAuthService.kt$SupaAuthService : AuthService</ID>
    <ID>UndocumentedPublicClass:SupaAuthSignInResult.kt$SupaAuthSignInResult : SignInResult</ID>
    <ID>UndocumentedPublicClass:SupaEmployeeService.kt$SupaEmployeeService : EmployeeService</ID>
    <ID>UndocumentedPublicClass:SupaEventLogService.kt$SupaEventLogService : EventLogService</ID>
    <ID>UndocumentedPublicClass:SupaFormsService.kt$SupaFormsService : FormsService</ID>
    <ID>UndocumentedPublicClass:SupaPropertyConfigService.kt$SupaPropertyConfigService : PropertyConfigService</ID>
    <ID>UndocumentedPublicClass:SupaRemoteConfigService.kt$SupaRemoteConfigService : RemoteConfigService</ID>
    <ID>UndocumentedPublicClass:SupaStorageService.kt$SupaStorageService : StorageService</ID>
    <ID>UndocumentedPublicClass:SupaTimeCardService.kt$SupaTimeCardService : TimeCardService</ID>
    <ID>UndocumentedPublicClass:TimeCardEvent.kt$TimeCardEvent</ID>
    <ID>UndocumentedPublicClass:TimeCardEvent.kt$TimeCardEvent$Noop : TimeCardEvent</ID>
    <ID>UndocumentedPublicClass:TimeCardEvent.kt$TimeCardEvent$TriggerMainActivityEvent : TimeCardEvent</ID>
    <ID>UndocumentedPublicClass:TimeCardManager.kt$TimeCardManager</ID>
    <ID>UndocumentedPublicClass:TimeCardRecordDao.kt$TimeCardRecordDao</ID>
    <ID>UndocumentedPublicClass:TimeCardRecordModel.kt$TimeCardRecordModel</ID>
    <ID>UndocumentedPublicClass:TimeCardService.kt$TimeCardService</ID>
    <ID>UndocumentedPublicClass:TimeCardUIModel.kt$TimeCardUIModel</ID>
    <ID>UndocumentedPublicClass:TimeCardUIState.kt$TimeCardUIState</ID>
    <ID>UndocumentedPublicClass:TimeCartViewModel.kt$TimeCartViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:UserModel.kt$UserModel</ID>
    <ID>UndocumentedPublicClass:ViewEmployeeEvent.kt$ViewEmployeeEvent</ID>
    <ID>UndocumentedPublicClass:ViewEmployeeEvent.kt$ViewEmployeeEvent$Noop : ViewEmployeeEvent</ID>
    <ID>UndocumentedPublicClass:ViewEmployeeEvent.kt$ViewEmployeeEvent$TriggerMainActivityEvent : ViewEmployeeEvent</ID>
    <ID>UndocumentedPublicClass:ViewEmployeeUIModel.kt$ViewEmployeeUIModel</ID>
    <ID>UndocumentedPublicClass:ViewEmployeeUIModel.kt$ViewEmployeeUIModel$EmployeeUIModel</ID>
    <ID>UndocumentedPublicClass:ViewEmployeeUIModel.kt$ViewEmployeeUIModel$TimeCardRecordUIModel</ID>
    <ID>UndocumentedPublicClass:ViewEmployeeUIState.kt$ViewEmployeeUIState</ID>
    <ID>UndocumentedPublicClass:ViewEmployeeViewModel.kt$ViewEmployeeViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:ViewRecordEvent.kt$ViewRecordEvent</ID>
    <ID>UndocumentedPublicClass:ViewRecordEvent.kt$ViewRecordEvent$Noop : ViewRecordEvent</ID>
    <ID>UndocumentedPublicClass:ViewRecordEvent.kt$ViewRecordEvent$TriggerMainActivityEvent : ViewRecordEvent</ID>
    <ID>UndocumentedPublicClass:ViewRecordUIModel.kt$ViewRecordUIModel</ID>
    <ID>UndocumentedPublicClass:ViewRecordUIState.kt$ViewRecordUIState</ID>
    <ID>UndocumentedPublicClass:ViewRecordViewModel.kt$ViewRecordViewModel : EdifikanaBaseViewModel</ID>
    <ID>UndocumentedPublicClass:WorkContext.kt$WorkContext</ID>
    <ID>UndocumentedPublicFunction:AddEmployeeScreen.kt$@Composable fun AddEmployeeScreen( onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: AddEmployeeViewModel = koinInject(), )</ID>
    <ID>UndocumentedPublicFunction:AddEmployeeViewModel.kt$AddEmployeeViewModel$@Suppress("ComplexCondition") fun saveEmployee( id: String?, idType: IdType?, name: String?, lastName: String?, role: EmployeeRole?, )</ID>
    <ID>UndocumentedPublicFunction:AddRecordScreen.kt$@Composable fun AddRecordScreen( onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: AddRecordViewModel = koinInject(), )</ID>
    <ID>UndocumentedPublicFunction:AddRecordUIModel.kt$fun EmployeeModel.toUIModel(): AddRecordUIModel</ID>
    <ID>UndocumentedPublicFunction:AddRecordViewModel.kt$AddRecordViewModel$@Suppress("ComplexCondition") fun addRecord( employeeDocumentId: EmployeePK?, unit: String?, eventType: EventType?, fallbackEmployeeName: String?, fallbackEventType: String?, summary: String?, description: String?, )</ID>
    <ID>UndocumentedPublicFunction:AddRecordViewModel.kt$AddRecordViewModel$fun loadEmployees()</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun eventLogRecordDao(): EventLogRecordDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun fileAttachmentDao(): FileAttachmentDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun timeCardRecordDao(): TimeCardRecordDao</ID>
    <ID>UndocumentedPublicFunction:AppTheme.kt$@Composable expect fun WindowDecorations( colorScheme: ColorScheme, darkTheme: Boolean, )</ID>
    <ID>UndocumentedPublicFunction:AppTheme.kt$@Composable expect fun getColorScheme( darkTheme: Boolean, dynamicColor: Boolean, darkColorScheme: ColorScheme, lightColorScheme: ColorScheme, ): ColorScheme</ID>
    <ID>UndocumentedPublicFunction:AppTheme.kt$@Composable fun AppTheme( darkTheme: Boolean = isSystemInDarkTheme(), // Dynamic color is available on Android 12+ dynamicColor: Boolean = true, content: @Composable () -&gt; Unit )</ID>
    <ID>UndocumentedPublicFunction:AttachmentManager.kt$AttachmentManager$suspend fun addAttachment( fileUris: List&lt;CoreUri&gt;, eventLogRecordPK: EventLogRecordPK, ): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:AttachmentManager.kt$AttachmentManager$suspend fun startUpload(): Result&lt;Job&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthManager.kt$AuthManager$suspend fun getUser(userPk: UserPk): Result&lt;UserModel&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthManager.kt$AuthManager$suspend fun handleSignInResult(signInResult: SignInResult): Result&lt;Boolean&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthManager.kt$AuthManager$suspend fun isSignedIn(enforceAllowList: Boolean): Result&lt;Boolean&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthManager.kt$AuthManager$suspend fun signInAnonymously(): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthService.kt$AuthService$suspend fun getUser(userPk: UserPk): Result&lt;UserModel&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthService.kt$AuthService$suspend fun handleSignInResult(signInResult: SignInResult): Result&lt;Boolean&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthService.kt$AuthService$suspend fun isSignedIn(enforceAllowList: Boolean): Result&lt;Boolean&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthService.kt$AuthService$suspend fun signInAnonymously(): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:Converters.kt$Converters$@TypeConverter fun fromList(list: List&lt;String&gt;?): String</ID>
    <ID>UndocumentedPublicFunction:Converters.kt$Converters$@TypeConverter fun fromString(value: String?): List&lt;String&gt;</ID>
    <ID>UndocumentedPublicFunction:CoreURiUtils.kt$expect fun CoreUri.getFilename(ioDependencies: IODependencies): String</ID>
    <ID>UndocumentedPublicFunction:CorutilesUtils.kt$expect fun processImageData(data: ByteArray): Result&lt;ByteArray&gt;</ID>
    <ID>UndocumentedPublicFunction:CorutilesUtils.kt$expect fun readBytes(uri: CoreUri, dependencies: IODependencies): Result&lt;ByteArray&gt;</ID>
    <ID>UndocumentedPublicFunction:CorutilesUtils.kt$fun WorkContext.launch(tag: String, block: suspend CoroutineScope.() -&gt; Unit): Job</ID>
    <ID>UndocumentedPublicFunction:CorutilesUtils.kt$inline fun &lt;T, R&gt; T.runSuspendCatching(tag: String, block: T.() -&gt; R): Result&lt;R&gt;</ID>
    <ID>UndocumentedPublicFunction:CorutilesUtils.kt$suspend inline fun &lt;T&gt; WorkContext.getOrCatch( tag: String, crossinline block: suspend () -&gt; T, ): Result&lt;T&gt;</ID>
    <ID>UndocumentedPublicFunction:DownloadStrategy.kt$DownloadStrategy$fun getCachedFile(targetRef: StorageRef): CoreUri</ID>
    <ID>UndocumentedPublicFunction:DownloadStrategy.kt$DownloadStrategy$fun isFileCached(targetRef: StorageRef): Boolean</ID>
    <ID>UndocumentedPublicFunction:DownloadStrategy.kt$DownloadStrategy$fun saveToFile(data: ByteArray, targetRef: StorageRef): CoreUri</ID>
    <ID>UndocumentedPublicFunction:Dropdown.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun &lt;T&gt; Dropdown( label: String, modifier: Modifier, items: List&lt;T&gt;, itemLabels: List&lt;String&gt;, startValueMatcher: ((T) -&gt; Boolean)?, valueSelected: (T) -&gt; Unit, )</ID>
    <ID>UndocumentedPublicFunction:Dropdown.kt$@Preview @Composable fun DropdownPreview()</ID>
    <ID>UndocumentedPublicFunction:EdifikanaApplicationScreen.kt$@Composable expect fun ComposableKoinContext(content: @Composable () -&gt; Unit)</ID>
    <ID>UndocumentedPublicFunction:EdifikanaApplicationScreen.kt$@Composable fun EdifikanaApplicationScreen( viewModel: MainActivityViewModel = koinInject(), eventHandler: EdifikanaMainScreenEventHandler, )</ID>
    <ID>UndocumentedPublicFunction:EdifikanaMainScreenEventHandler.kt$EdifikanaMainScreenEventHandler$fun openCamera(event: MainActivityEvent.OpenCamera)</ID>
    <ID>UndocumentedPublicFunction:EdifikanaMainScreenEventHandler.kt$EdifikanaMainScreenEventHandler$fun openImageExternally(event: MainActivityEvent.OpenImageExternally)</ID>
    <ID>UndocumentedPublicFunction:EdifikanaMainScreenEventHandler.kt$EdifikanaMainScreenEventHandler$fun openPhotoPicker(event: MainActivityEvent.OpenPhotoPicker)</ID>
    <ID>UndocumentedPublicFunction:EdifikanaMainScreenEventHandler.kt$EdifikanaMainScreenEventHandler$fun shareContent(event: MainActivityEvent.ShareContent)</ID>
    <ID>UndocumentedPublicFunction:EdifikanaMainScreenEventHandler.kt$EdifikanaMainScreenEventHandler$fun showSnackbar(event: MainActivityEvent.ShowSnackbar)</ID>
    <ID>UndocumentedPublicFunction:EmployeeListScreen.kt$@Composable fun EmployeeListScreen( onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: EmployeeListViewModel = koinInject() )</ID>
    <ID>UndocumentedPublicFunction:EmployeeListUIModel.kt$fun EmployeeModel.toUIModel(): EmployeeUIModel</ID>
    <ID>UndocumentedPublicFunction:EmployeeListViewModel.kt$EmployeeListViewModel$fun loadEmployees()</ID>
    <ID>UndocumentedPublicFunction:EmployeeListViewModel.kt$EmployeeListViewModel$fun navigateToAddEmployee()</ID>
    <ID>UndocumentedPublicFunction:EmployeeListViewModel.kt$EmployeeListViewModel$fun navigateToEmployee(employeePK: EmployeePK)</ID>
    <ID>UndocumentedPublicFunction:EmployeeManager.kt$EmployeeManager$suspend fun addEmployee(employee: EmployeeModel)</ID>
    <ID>UndocumentedPublicFunction:EmployeeManager.kt$EmployeeManager$suspend fun getEmployee(employeePK: EmployeePK): Result&lt;EmployeeModel&gt;</ID>
    <ID>UndocumentedPublicFunction:EmployeeManager.kt$EmployeeManager$suspend fun getEmployees(): Result&lt;List&lt;EmployeeModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:EmployeeMappers.kt$@FireStoreModel fun Employee.toDomainModel(): EmployeeModel</ID>
    <ID>UndocumentedPublicFunction:EmployeeMappers.kt$@FireStoreModel fun EmployeeModel.toFirebaseModel()</ID>
    <ID>UndocumentedPublicFunction:EmployeeMappers.kt$@SupabaseModel fun Employee.toDomainModel(): EmployeeModel</ID>
    <ID>UndocumentedPublicFunction:EmployeeMappers.kt$@SupabaseModel fun EmployeeModel.toSupabaseModel()</ID>
    <ID>UndocumentedPublicFunction:EmployeeModel.kt$fun EmployeeModel.fullName()</ID>
    <ID>UndocumentedPublicFunction:EmployeeService.kt$EmployeeService$suspend fun addEmployee(employee: EmployeeModel): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:EmployeeService.kt$EmployeeService$suspend fun getEmployee(employeePK: EmployeePK): Result&lt;EmployeeModel&gt;</ID>
    <ID>UndocumentedPublicFunction:EmployeeService.kt$EmployeeService$suspend fun getEmployees(): Result&lt;List&lt;EmployeeModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:EntryScreen.kt$@Composable fun EntryScreen( formPK: FormPK, mainActivityDelegatedEvent: MainActivityDelegatedEvent, onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: EntryViewModel = koinInject() )</ID>
    <ID>UndocumentedPublicFunction:EntryUIModel.kt$fun FormModel.toEntryUIModel(): EntryUIModel</ID>
    <ID>UndocumentedPublicFunction:EntryViewModel.kt$EntryViewModel$fun addRecord()</ID>
    <ID>UndocumentedPublicFunction:EntryViewModel.kt$EntryViewModel$fun loadForm(formPK: FormPK)</ID>
    <ID>UndocumentedPublicFunction:EntryViewModel.kt$EntryViewModel$fun updateField(fieldId: String, value: String)</ID>
    <ID>UndocumentedPublicFunction:EventLogManager.kt$EventLogManager$suspend fun addRecord(eventLogRecord: EventLogRecordModel)</ID>
    <ID>UndocumentedPublicFunction:EventLogManager.kt$EventLogManager$suspend fun getRecord( eventLogRecordPK: EventLogRecordPK, ): Result&lt;EventLogRecordModel&gt;</ID>
    <ID>UndocumentedPublicFunction:EventLogManager.kt$EventLogManager$suspend fun getRecords(): Result&lt;List&lt;EventLogRecordModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:EventLogManager.kt$EventLogManager$suspend fun startUpload(): Result&lt;Job&gt;</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordDao.kt$EventLogRecordDao$@Delete suspend fun delete(timeCardRecordEntity: EventLogRecordEntity)</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordDao.kt$EventLogRecordDao$@Insert suspend fun insert(timeCardRecordEntity: EventLogRecordEntity)</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordDao.kt$EventLogRecordDao$@Query("SELECT * FROM EventLogRecordEntity WHERE id = :id") suspend fun get(id: String): EventLogRecordEntity?</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordDao.kt$EventLogRecordDao$@Query("SELECT * FROM EventLogRecordEntity") suspend fun getAll(): List&lt;EventLogRecordEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordDao.kt$EventLogRecordDao$@Query("SELECT COUNT(id) FROM EventLogRecordEntity") suspend fun getCount(): Int</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordMappers.kt$@FireStoreModel fun EventLogRecord.toDomainModel(storageBucket: String): EventLogRecordModel</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordMappers.kt$@FireStoreModel fun EventLogRecordModel.toFirebaseModel(): EventLogRecord</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordMappers.kt$@SupabaseModel fun EventLogRecord.toDomainModel(storageBucket: String): EventLogRecordModel</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordMappers.kt$@SupabaseModel fun EventLogRecordModel.toFirebaseModel(): EventLogRecord</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordMappers.kt$fun EventLogRecordEntity.toDomainModel(): EventLogRecordModel</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordMappers.kt$fun EventLogRecordModel.toEntity(): EventLogRecordEntity</ID>
    <ID>UndocumentedPublicFunction:EventLogRecordModel.kt$EventLogRecordModel.Companion$fun createTemporary( employeePk: EmployeePK?, timeRecorded: Long, unit: String, eventType: EventType?, fallbackEmployeeName: String?, fallbackEventType: String?, summary: String, description: String, ): EventLogRecordModel</ID>
    <ID>UndocumentedPublicFunction:EventLogScreen.kt$@Composable fun EventLogScreen( onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: EventLogViewModel = koinInject(), )</ID>
    <ID>UndocumentedPublicFunction:EventLogService.kt$EventLogService$suspend fun addRecord(eventLogRecord: EventLogRecordModel): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:EventLogService.kt$EventLogService$suspend fun getRecord( eventLogRecordPK: EventLogRecordPK, ): Result&lt;EventLogRecordModel&gt;</ID>
    <ID>UndocumentedPublicFunction:EventLogService.kt$EventLogService$suspend fun getRecords(): Result&lt;List&lt;EventLogRecordModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:EventLogService.kt$EventLogService$suspend fun updateRecord(eventLogRecord: EventLogRecordModel): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:EventLogUIModel.kt$suspend fun EventLogRecordModel.toUIModel(): EventLogRecordUIModel</ID>
    <ID>UndocumentedPublicFunction:EventLogViewModel.kt$EventLogViewModel$fun loadRecords()</ID>
    <ID>UndocumentedPublicFunction:EventLogViewModel.kt$EventLogViewModel$fun openAddRecordScreen()</ID>
    <ID>UndocumentedPublicFunction:EventLogViewModel.kt$EventLogViewModel$fun openRecordScreen(recordPk: EventLogRecordPK?)</ID>
    <ID>UndocumentedPublicFunction:FileAttachmentDao.kt$FileAttachmentDao$@Delete suspend fun delete(fileAttachmentEntity: FileAttachmentEntity)</ID>
    <ID>UndocumentedPublicFunction:FileAttachmentDao.kt$FileAttachmentDao$@Insert suspend fun insert(fileAttachmentEntity: FileAttachmentEntity)</ID>
    <ID>UndocumentedPublicFunction:FileAttachmentDao.kt$FileAttachmentDao$@Query("SELECT * FROM FileAttachmentEntity") suspend fun getAll(): List&lt;FileAttachmentEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:FileAttachmentDao.kt$FileAttachmentDao$@Query("SELECT COUNT(id) FROM FileAttachmentEntity") suspend fun getCount(): Int</ID>
    <ID>UndocumentedPublicFunction:FileAttachmentEntity.kt$FileAttachmentEntity.Companion$fun create( eventLogRecordPK: EventLogRecordPK, clock: Clock, fileUri: CoreUri, ): FileAttachmentEntity</ID>
    <ID>UndocumentedPublicFunction:FormListScreen.kt$@Composable fun FormListScreen( mainActivityDelegatedEvent: MainActivityDelegatedEvent, onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: FormListViewModel = koinInject() )</ID>
    <ID>UndocumentedPublicFunction:FormListScreen.kt$@Preview @Composable fun FormListScreenPreview()</ID>
    <ID>UndocumentedPublicFunction:FormListUIModel.kt$fun FormModel.toFormUIModel(): FormUIModel</ID>
    <ID>UndocumentedPublicFunction:FormListViewModel.kt$FormListViewModel$fun loadForms()</ID>
    <ID>UndocumentedPublicFunction:FormListViewModel.kt$FormListViewModel$fun navigateToForm(formUI: FormUIModel)</ID>
    <ID>UndocumentedPublicFunction:FormListViewModel.kt$FormListViewModel$fun navigateToFormRecords()</ID>
    <ID>UndocumentedPublicFunction:FormMappers.kt$@FireStoreModel fun Form.toDomainModel(): FormModel</ID>
    <ID>UndocumentedPublicFunction:FormRecordMappers.kt$@FireStoreModel fun FormRecord.toDomainModel(): FormRecordModel</ID>
    <ID>UndocumentedPublicFunction:FormRecordMappers.kt$@FireStoreModel fun FormRecordModel.toFirebaseModel(propertyId: String): FormRecord</ID>
    <ID>UndocumentedPublicFunction:FormRecordMappers.kt$fun createSubmissionFormRecordModel( formModel: FormModel, clock: Clock, fieldNames: Map&lt;String, String&gt;, fields: Map&lt;String, String&gt;, ): FormRecordModel</ID>
    <ID>UndocumentedPublicFunction:FormsManager.kt$FormsManager$suspend fun getForm(formPK: FormPK): Result&lt;FormModel&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsManager.kt$FormsManager$suspend fun getFormRecord(formRecordPK: FormRecordPK): Result&lt;FormRecordModel&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsManager.kt$FormsManager$suspend fun getFormRecords(): Result&lt;List&lt;FormRecordModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsManager.kt$FormsManager$suspend fun getForms(): Result&lt;List&lt;FormModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsManager.kt$FormsManager$suspend fun submitFormRecord(formRecordModel: FormRecordModel): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsService.kt$FormsService$suspend fun getForm(formPK: FormPK): Result&lt;FormModel&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsService.kt$FormsService$suspend fun getFormRecord(formRecordPK: FormRecordPK): Result&lt;FormRecordModel&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsService.kt$FormsService$suspend fun getFormRecords(): Result&lt;List&lt;FormRecordModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsService.kt$FormsService$suspend fun getForms(): Result&lt;List&lt;FormModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:FormsService.kt$FormsService$suspend fun submitFormRecord(formRecordModel: FormRecordModel): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:LoadingAnimationOverlay.kt$@Composable fun LoadingAnimationOverlay(isLoading: Boolean)</ID>
    <ID>UndocumentedPublicFunction:MainActivityScreen.kt$@OptIn(ExperimentalMaterial3Api::class, RouteSafePath::class) @Composable fun MainActivityScreen( navController: NavHostController, mainActivityDelegatedEvent: MainActivityDelegatedEvent, onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, formTabFeatureEnabled: Boolean, )</ID>
    <ID>UndocumentedPublicFunction:MainActivityViewModel.kt$MainActivityViewModel$fun enforceAuth()</ID>
    <ID>UndocumentedPublicFunction:MainActivityViewModel.kt$MainActivityViewModel$fun executeMainActivityEvent(event: MainActivityEvent)</ID>
    <ID>UndocumentedPublicFunction:MainActivityViewModel.kt$MainActivityViewModel$fun handleReceivedImage(uri: CoreUri?)</ID>
    <ID>UndocumentedPublicFunction:MainActivityViewModel.kt$MainActivityViewModel$fun handleReceivedImages(uris: List&lt;CoreUri&gt;)</ID>
    <ID>UndocumentedPublicFunction:Mappers.kt$@Composable fun EmployeeRole?.toRoleFriendlyNameCompose(): String</ID>
    <ID>UndocumentedPublicFunction:Mappers.kt$@Composable fun EventType?.toFriendlyStringCompose(): String</ID>
    <ID>UndocumentedPublicFunction:Mappers.kt$@Composable fun IdType.toIdTypeFriendlyName(): String</ID>
    <ID>UndocumentedPublicFunction:Mappers.kt$fun Long?.toFriendlyDateTime(): String</ID>
    <ID>UndocumentedPublicFunction:Mappers.kt$suspend fun EmployeeRole?.toRoleFriendlyName(): String</ID>
    <ID>UndocumentedPublicFunction:Mappers.kt$suspend fun EventType?.toFriendlyString(): String</ID>
    <ID>UndocumentedPublicFunction:Mappers.kt$suspend fun TimeCardEventType?.eventTypeFriendlyName(): String</ID>
    <ID>UndocumentedPublicFunction:PathUtils.kt$fun publicDownloadUrl(storageRef: StorageRef, storageBucket: String): String</ID>
    <ID>UndocumentedPublicFunction:PathUtils.kt$fun publicSupabaseDownloadUrl( storageRef: StorageRef, storage: Storage, ): String</ID>
    <ID>UndocumentedPublicFunction:PropertyConfigManager.kt$PropertyConfigManager$suspend fun getPropertyConfig(): Result&lt;PropertyConfigModel&gt;</ID>
    <ID>UndocumentedPublicFunction:PropertyConfigMappers.kt$@FireStoreModel fun PropertyConfig.toDomainModel(): PropertyConfigModel</ID>
    <ID>UndocumentedPublicFunction:PropertyConfigMappers.kt$@FireStoreModel fun PropertyConfigModel.toFirebaseModel()</ID>
    <ID>UndocumentedPublicFunction:PropertyConfigModel.kt$PropertyConfigModel$fun driverFolderUrl(): String</ID>
    <ID>UndocumentedPublicFunction:PropertyConfigModel.kt$PropertyConfigModel$fun eventLogSpreadsheetUrl(): String</ID>
    <ID>UndocumentedPublicFunction:PropertyConfigModel.kt$PropertyConfigModel$fun formEntriesSpreadsheetUrl(): String</ID>
    <ID>UndocumentedPublicFunction:PropertyConfigModel.kt$PropertyConfigModel$fun timeCartSpreadsheetUrl(): String</ID>
    <ID>UndocumentedPublicFunction:PropertyConfigService.kt$PropertyConfigService$suspend fun getPropertyConfig(): Result&lt;PropertyConfigModel&gt;</ID>
    <ID>UndocumentedPublicFunction:RecordReadScreen.kt$@Composable fun RecordReadScreen( formRecordPK: FormRecordPK, mainActivityDelegatedEvent: MainActivityDelegatedEvent, onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: RecordReadViewModel = koinInject() )</ID>
    <ID>UndocumentedPublicFunction:RecordReadUIModel.kt$fun FormRecordModel.toReadRecordUIModel(): RecordReadUIModel</ID>
    <ID>UndocumentedPublicFunction:RecordReadViewModel.kt$RecordReadViewModel$fun loadRecord(recordPK: FormRecordPK)</ID>
    <ID>UndocumentedPublicFunction:RecordsScreen.kt$@Composable fun RecordsScreen( mainActivityDelegatedEvent: MainActivityDelegatedEvent, onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: RecordsViewModel = koinInject() )</ID>
    <ID>UndocumentedPublicFunction:RecordsUIModel.kt$@Suppress("MagicNumber") fun FormRecordModel.toUIModel(): RecordsUIModel</ID>
    <ID>UndocumentedPublicFunction:RecordsViewModel.kt$RecordsViewModel$fun loadRecords()</ID>
    <ID>UndocumentedPublicFunction:RecordsViewModel.kt$RecordsViewModel$fun navigateToRecord(record: FormRecordModel)</ID>
    <ID>UndocumentedPublicFunction:RemoteConfig.kt$FeatureConfig$fun isFeatureEnabled(feature: Features): Boolean</ID>
    <ID>UndocumentedPublicFunction:RemoteConfigService.kt$RemoteConfigService$fun getRemoteConfigPayload(): RemoteConfig</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toEventLogAddItemRoute(): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toEventLogRoute(): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toEventLogSingleItemRoute(eventLogRecordPk: EventLogRecordPK): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toFormEntryRoute(formPk: FormPK): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toFormRecordReadRoute( formRecordPk: FormRecordPK, ): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toFormRecordsRoute(): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toFormsRoute(): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toSignInRoute(): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toTimeCardAddEmployeeRoute(): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toTimeCardEmployeeListRoute(): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toTimeCardRoute(): String</ID>
    <ID>UndocumentedPublicFunction:Route.kt$Route.Companion$fun toTimeCardSingleEmployeeRoute(employeePk: EmployeePK): String</ID>
    <ID>UndocumentedPublicFunction:SignInV2Screen.kt$@Composable fun SignInV2Screen( mainActivityDelegatedEvent: MainActivityDelegatedEvent, onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: SignInV2ViewModel = koinInject(), composeAuth: ComposeAuth = koinInject() )</ID>
    <ID>UndocumentedPublicFunction:SignInV2ViewModel.kt$SignInV2ViewModel$fun closeAccessCodeDialog()</ID>
    <ID>UndocumentedPublicFunction:SignInV2ViewModel.kt$SignInV2ViewModel$fun enforceSignIn()</ID>
    <ID>UndocumentedPublicFunction:SignInV2ViewModel.kt$SignInV2ViewModel$fun handleFallback()</ID>
    <ID>UndocumentedPublicFunction:SignInV2ViewModel.kt$SignInV2ViewModel$fun handleSignInResult(result: NativeSignInResult)</ID>
    <ID>UndocumentedPublicFunction:SignInV2ViewModel.kt$SignInV2ViewModel$fun showAccessCodeDialog()</ID>
    <ID>UndocumentedPublicFunction:SignInV2ViewModel.kt$SignInV2ViewModel$fun submitAccessCode(code: String)</ID>
    <ID>UndocumentedPublicFunction:StorageRef.kt$StorageRef$fun filename(): String</ID>
    <ID>UndocumentedPublicFunction:StorageRef.kt$StorageRef$fun path(): List&lt;String&gt;</ID>
    <ID>UndocumentedPublicFunction:StorageService.kt$StorageService$suspend fun downloadImage(targetRef: StorageRef): Result&lt;CoreUri&gt;</ID>
    <ID>UndocumentedPublicFunction:StorageService.kt$StorageService$suspend fun uploadFile(data: ByteArray, targetRef: StorageRef): Result&lt;StorageRef&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardManager.kt$TimeCardManager$suspend fun addRecord(timeCardRecord: TimeCardRecordModel, cachedImageUrl: CoreUri)</ID>
    <ID>UndocumentedPublicFunction:TimeCardManager.kt$TimeCardManager$suspend fun getAllRecords(): Result&lt;List&lt;TimeCardRecordModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardManager.kt$TimeCardManager$suspend fun getRecord(timeCardRecordPK: TimeCardRecordPK): Result&lt;TimeCardRecordModel&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardManager.kt$TimeCardManager$suspend fun getRecords(employeePK: EmployeePK): Result&lt;List&lt;TimeCardRecordModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardManager.kt$TimeCardManager$suspend fun startUpload(): Result&lt;Job&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordDao.kt$TimeCardRecordDao$@Delete suspend fun delete(timeCardRecordEntity: TimeCardRecordEntity)</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordDao.kt$TimeCardRecordDao$@Insert suspend fun insert(timeCardRecordEntity: TimeCardRecordEntity)</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordDao.kt$TimeCardRecordDao$@Query("SELECT * FROM TimeCardRecordEntity WHERE employeeDocumentId = :employeeDocumentId") suspend fun getAll(employeeDocumentId: String): List&lt;TimeCardRecordEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordDao.kt$TimeCardRecordDao$@Query("SELECT * FROM TimeCardRecordEntity WHERE id = :id") suspend fun get(id: String): TimeCardRecordEntity?</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordDao.kt$TimeCardRecordDao$@Query("SELECT * FROM TimeCardRecordEntity") suspend fun getAll(): List&lt;TimeCardRecordEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordMappers.kt$@FireStoreModel fun TimeCardRecord.toDomainModel(storageBucket: String): TimeCardRecordModel</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordMappers.kt$@FireStoreModel fun TimeCardRecordEntity.toFirebaseModel(): TimeCardRecord</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordMappers.kt$@FireStoreModel fun TimeCardRecordModel.toFirebaseModel(): TimeCardRecord</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordMappers.kt$@SupabaseModel fun TimeCardRecord.toDomainModel(storage: Storage): TimeCardRecordModel</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordMappers.kt$@SupabaseModel fun TimeCardRecordEntity.toFirebaseModel(): TimeCardRecord</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordMappers.kt$@SupabaseModel fun TimeCardRecordModel.toFirebaseModel(): TimeCardRecord</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordMappers.kt$fun TimeCardRecordEntity.toDomainModel(): TimeCardRecordModel</ID>
    <ID>UndocumentedPublicFunction:TimeCardRecordMappers.kt$fun TimeCardRecordModel.toEntity(cachedImageUrl: CoreUri): TimeCardRecordEntity</ID>
    <ID>UndocumentedPublicFunction:TimeCardScreen.kt$@Composable fun TimeCardScreen( onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: TimeCartViewModel = koinInject() )</ID>
    <ID>UndocumentedPublicFunction:TimeCardService.kt$TimeCardService$suspend fun addRecord(timeCardRecord: TimeCardRecordModel): Result&lt;Unit&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardService.kt$TimeCardService$suspend fun getAllRecords(): Result&lt;List&lt;TimeCardRecordModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardService.kt$TimeCardService$suspend fun getRecord(timeCardRecordPK: TimeCardRecordPK): Result&lt;TimeCardRecordModel&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardService.kt$TimeCardService$suspend fun getRecords(employeePK: EmployeePK): Result&lt;List&lt;TimeCardRecordModel&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCardUIModel.kt$suspend fun List&lt;TimeCardRecordModel&gt;.toUIModel(employees: List&lt;EmployeeModel&gt;): List&lt;TimeCardUIModel&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeCartViewModel.kt$TimeCartViewModel$fun loadEvents()</ID>
    <ID>UndocumentedPublicFunction:TimeCartViewModel.kt$TimeCartViewModel$fun navigateToEmployee(employeePK: EmployeePK)</ID>
    <ID>UndocumentedPublicFunction:TimeCartViewModel.kt$TimeCartViewModel$fun navigateToEmployeeList()</ID>
    <ID>UndocumentedPublicFunction:UserMappers.kt$@FireStoreModel fun User.toDomainModel(): UserModel</ID>
    <ID>UndocumentedPublicFunction:UserMappers.kt$@SupabaseModel fun User.toDomainModel(): UserModel</ID>
    <ID>UndocumentedPublicFunction:ViewEmployeeScreen.kt$@Composable fun ViewEmployeeScreen( employeePK: EmployeePK, mainActivityDelegatedEvent: MainActivityDelegatedEvent, onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: ViewEmployeeViewModel = koinInject(), )</ID>
    <ID>UndocumentedPublicFunction:ViewEmployeeUIModel.kt$suspend fun EmployeeModel.toUIModel(): ViewEmployeeUIModel.EmployeeUIModel</ID>
    <ID>UndocumentedPublicFunction:ViewEmployeeUIModel.kt$suspend fun TimeCardRecordModel.toUIModel(): ViewEmployeeUIModel.TimeCardRecordUIModel</ID>
    <ID>UndocumentedPublicFunction:ViewEmployeeViewModel.kt$ViewEmployeeViewModel$fun loadEmployee(employeePK: EmployeePK)</ID>
    <ID>UndocumentedPublicFunction:ViewEmployeeViewModel.kt$ViewEmployeeViewModel$fun onClockEventSelected(eventType: TimeCardEventType)</ID>
    <ID>UndocumentedPublicFunction:ViewEmployeeViewModel.kt$ViewEmployeeViewModel$fun recordClockEvent(photoUri: CoreUri)</ID>
    <ID>UndocumentedPublicFunction:ViewEmployeeViewModel.kt$ViewEmployeeViewModel$fun share(timeCardRecordPK: TimeCardRecordPK?)</ID>
    <ID>UndocumentedPublicFunction:ViewRecordScreen.kt$@Composable fun ViewRecordScreen( eventLogRecordPK: EventLogRecordPK, mainActivityDelegatedEvent: MainActivityDelegatedEvent, onMainActivityEventInvoke: (MainActivityEvent) -&gt; Unit, onTitleChange: (String) -&gt; Unit, viewModel: ViewRecordViewModel = koinInject(), )</ID>
    <ID>UndocumentedPublicFunction:ViewRecordUIModel.kt$suspend fun EventLogRecordModel.toUIModel(): ViewRecordUIModel</ID>
    <ID>UndocumentedPublicFunction:ViewRecordViewModel.kt$ViewRecordViewModel$fun loadRecord(eventLogRecord: EventLogRecordPK)</ID>
    <ID>UndocumentedPublicFunction:ViewRecordViewModel.kt$ViewRecordViewModel$fun openImage(attachmentHolder: AttachmentHolder)</ID>
    <ID>UndocumentedPublicFunction:ViewRecordViewModel.kt$ViewRecordViewModel$fun pickMultipleVisualMedia()</ID>
    <ID>UndocumentedPublicFunction:ViewRecordViewModel.kt$ViewRecordViewModel$fun share()</ID>
    <ID>UndocumentedPublicFunction:ViewRecordViewModel.kt$ViewRecordViewModel$fun upload(uris: List&lt;CoreUri&gt;)</ID>
  </CurrentIssues>
</SmellBaseline>
